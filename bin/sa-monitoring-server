#!/usr/bin/env ruby

$: << File.dirname(__FILE__) + '/../lib' unless $:.include?(File.dirname(__FILE__) + '/../lib/')
require 'sa-monitoring/config'
require 'amqp'
require 'em-hiredis'

#
# Connect to RabbitMQ
#
AMQP.start(:host => CONFIG['rabbitmq']['server']) do

  #redis = EM::Hiredis.connect(CONFIG['redis']['server'])
  redis = EM::Hiredis.connect

  amq = MQ.new

  #
  # Publish critical/warning check results
  #
  amq.queue('results').subscribe do |result|
    puts result
  end

  #
  # Send checks out to subscribed clients
  #
  exchanges = Hash.new

  amq.queue('checks').subscribe do |check|
    check = JSON.parse(check)

    check_id = UUIDTools::UUID.random_create.to_s

    redis.set(check_id, {'name' => check['name'], 'timestamp' => Time.now.to_i}.to_json).callback do
      redis.sadd('checks', check_id).callback do
        redis.smembers('checks').callback do |checks|
          puts checks
        end
      end
    end

    check_msg = {
      'name' => check['name'],
      'id' => check_id
    }.to_json

    check['subscribers'].each do |exchange|

      if exchanges[exchange].nil?
        exchanges[exchange] = amq.fanout(exchange)
      end

      exchanges[exchange].publish(check_msg)
    end
  end

  #
  # Manually expire checks
  #
  EM.add_periodic_timer(300) do
#    redis.smembers('checks').each do |check_id|
#      check = JSON.parse(redis.get(check_id))
#      if check['timestamp'] < Time.now.to_i - 600
#        redis.del(check_id)
#        redis.srem('checks', check_id)
#      end
#    end
  end

  #
  # Populate the checks queue with checks defined in the JSON config file
  #
  check = amq.queue('checks')

  CONFIG['checks'].each_with_index do |(name, info), index|
    EM.add_timer(7*index) do
      EM.add_periodic_timer(info['interval']) do
        check.publish({'name' => name, 'subscribers' => info['subscribers']}.to_json)
      end
    end
  end

  #
  # Accept client keep-alives
  #
  class OhaiServer < EM::Connection
    attr_accessor :redis

    def receive_data(data)
      client = JSON.parse(data)['name']
      @redis.set(client, data)
      @redis.sadd('clients', client)
    end
  end

  EM.start_server('0.0.0.0', 9000, OhaiServer) do |ohaiserver|
    ohaiserver.redis = redis
  end

  #
  # Recognize exit command
  #
  Signal.trap("INT") do
    EM.stop
  end
  Signal.trap("TERM") do
    EM.stop
  end
end
