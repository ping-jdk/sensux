* Development
  Keep it simple.

** RDD
*** A Client Will
  - Have a set of attributes to describe it, including its responsibilities (generate w/ ohai/factor)
  - Subscribe to a set of fanout exchanges determined by its responsibilities (roles)
  - Send keep alives to a server
  - Execute a check and push the result and its client name to a direct exchange (named "results")
  - Substitute a token (:::token:::) in commands with its matching client attribute
  - Not allow overlapping check executions of the same name
  - Report when it is unaware of a check

*** A Server Will
  - Populate an internal work queue from a JSON config file (generate with OpsChef/Puppet)
  - Subscribe to two direct exchanges (named "results" & "checks")
  - Pull a check from the internal work queue and then push it out onto its associated fanout exchanges (roles)
  - Process results, storing the latest events (critical/warnings) for clients, a good result will flush a previous event for that client (resolve)
  - Create an event (critical/warning) when it stops receiving keep-alives from a client
  - Trigger the event handlers, providing them with an event file (JSON document)

*** An API Will
  - List events
  - Remove a client and resolve any associated events
  - List all clients and their attributes
  - List a client and its attributes

*** A Handler Will
  - Accept a single command line argument for an event file path (-f)
  - Parse the JSON event file
  - Handle the event as it wishes

*** A Dashboard Will
  - Display all events (critical/warnings) (including additional check information; owner, notes, etc)
  - Display all clients

** Local Setup
*** Configure RabbitMQ
  user

  : rabbitmqctl add_user sensu password

  vhost

  : rabbitmqctl add_vhost /sensu

  permissions

  : rabbitmqctl set_permissions -p /sensu sensu ".*" ".*" ".*"

  /usr/local/etc/rabbitmq/rabbitmq.config

  substitute **PATH** with your sensu project path

  : [
  :   {rabbit, [
  :     {ssl_listeners, [5671]},
  :     {ssl_options, [{cacertfile,"*PATH*/certs/testca/cacert.pem"},
  :                    {certfile,"*PATH*/certs/server/cert.pem"},
  :                    {keyfile,"*PATH*/certs/server/key.pem"},
  :                    {verify,verify_peer},
  :                    {fail_if_no_peer_cert,true}]}
  :   ]}
  : ].
