* A Client Will
- Generate a set of client attributes to describe itself (using ohai/factor)
- Subscribe to a set of fanout exchanges base on its run list or roles (part of client attributes)
- Send keep alives (client attributes) via a TCP socket to the server
- Execute a check and push the result and the client name to a direct exchange ("results")

* A Server Will
- Populate an internal work queue from an OpsChef data bag (nagios checks mapped to roles)
- Subscribe to a direct exchange ("results")
- Pull a check from the internal work queue, tag it with a check id (uuid), and then push it out onto its associated fanout exchange (role)
- Save sent check id, timestamp, and the command name in redis (will auto expire)
- Process results, storing the latest critical/warning for that client in redis, a good result will flush previous results for that client

* An API Will
- List all current critical/warning events
- Remove a client from redis and resolve any associated keep-alive events

* A Handler Will
- Accept a single command line argument for an event file path
- Parse the JSON event file
- Handle the event as it wishes

* Goals
** Friday, July 29th
- A client/server/api that fulfills the above behavior
** Friday, August 6th
- SA-Monitoring running in parallel to Nagios
- Executing several nagios plugins
- A Pagerduty handler (not paging)
